<root>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.DefaultImpls R accept(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor&lt;R,D&gt;, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceKind TEST'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor&gt; newCopyBuilder()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType ARGUMENT_CONTAINER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findContinuationClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities INHERITED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor&gt; getSealedSubclasses()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor R accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor&lt;R,D&gt;, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility findInvisibleMember(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness containerRelation(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness LESS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt boolean isFinalClass(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility findInvisibleMember(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitTypeParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertySetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor void setOverriddenDescriptors(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getFragments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; getUpperBounds()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider java.util.List&lt;java.lang.String&gt; findMetadataPackageParts(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setExtensionReceiverType(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor kotlin.reflect.jvm.internal.impl.types.Variance getVariance()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalOrPackage kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt; computeConstructorTypeParameters(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitReceiverParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, boolean, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType CONTAINER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities INTERNAL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Local kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider.Empty java.util.List&lt;java.lang.String&gt; findMetadataPackageParts(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness UNKNOWN'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality.Companion kotlin.reflect.jvm.internal.impl.descriptors.Modality convertFromFlags(boolean, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities PROTECTED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility Visibility(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalOrPackage kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; putUserData(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.UserDataKey&lt;V&gt;, V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.name.Name getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters getClassifierDescriptor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstUtilKt boolean canBeUsedForConstVal(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClassByFqName(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality ABSTRACT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider.Empty java.util.List&lt;java.lang.String&gt; findPackageParts(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isPrivate(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality SEALED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Named kotlin.reflect.jvm.internal.impl.name.Name getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities INVISIBLE_FAKE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy$default(kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation, kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClassByFqName(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.Capability java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities PRIVATE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ENUM_ENTRY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt; getDeclaredTypeParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.Capability java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor java.util.Set&lt;kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor&gt; getAllImplementingModules()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt boolean isOverridable(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor resolveClassByFqName(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitModuleDeclaration(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.DefaultImpls R accept(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor&lt;R,D&gt;, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Private kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findContinuationClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility java.lang.String getDisplayName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setSource(kotlin.reflect.jvm.internal.impl.descriptors.SourceElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setValueParameters(java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ENUM_CLASS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setValueParameters(java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation leastPermissiveDescriptor(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind CLASS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource kotlin.reflect.jvm.internal.impl.descriptors.SourceElement getSource()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt; computeConstructorTypeParameters(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SourceKind getSourceKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind DECLARATION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getConstructedClass()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedInnerClassesScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor&gt; getAccessors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind SYNTHESIZED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertyDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind DELEGATION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setSubstitution(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind OBJECT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtectedBound INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, boolean, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.DefaultImpls kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor substitute(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities ALWAYS_SUITABLE_RECEIVER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation leastPermissiveDescriptor(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility kotlin.reflect.jvm.internal.impl.descriptors.Visibility normalize()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider.Empty INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPackageFragmentDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setHiddenForResolutionEverywhereBesideSupercalls()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ScriptDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor getUnsubstitutedPrimaryConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.PackagePrivate kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor void acceptVoid(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor&lt;java.lang.Void,java.lang.Void&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisibleIgnoringReceiver(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ParameterDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation DescriptorWithRelation(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor&gt; getValueParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalOrPackage kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities FALSE_IF_PROTECTED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality Companion'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor.DefaultImpls boolean isEmpty(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.MemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitVariableDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation DescriptorWithRelation(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider.Empty java.util.List&lt;java.lang.String&gt; findPackageParts(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor kotlin.reflect.jvm.internal.impl.name.FqName getFqName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.PropertySetterDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Internal INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType CONSTRUCTOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitVariableDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisibleIgnoringReceiver(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitFunctionDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setOriginal(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setSource(kotlin.reflect.jvm.internal.impl.descriptors.SourceElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Public kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setHiddenToOvercomeSignatureClash()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities PUBLIC'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findContinuationClassDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Private INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueDescriptor kotlin.reflect.jvm.internal.impl.types.KotlinType getType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPropertyGetterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getModule()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.VariableAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessors getCorrespondingVariable()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Private kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceKind PRODUCTION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassKind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.Modality getModality()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstUtil boolean canBeUsedForConstVal(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.name.Name, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility java.lang.String getName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Public INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setTypeParameters(java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setCopyOverrides(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor&gt; getConstructors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind ANNOTATION_CLASS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility java.lang.Integer compareTo(kotlin.reflect.jvm.internal.impl.descriptors.Visibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities PRIVATE_TO_THIS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessorsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.VariableAccessorDescriptor&gt; getAccessors(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessors) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.RelationToType component2()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Private kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor kotlin.reflect.jvm.internal.impl.name.FqName getFqName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType&gt; segments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected.WhenMappings $EnumSwitchMapping$1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality FINAL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceElement NO_SOURCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassKind INTERFACE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness MORE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; putUserData(kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.UserDataKey&lt;V&gt;, V)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceKind NONE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue getValue()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor component1()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor kotlin.reflect.jvm.internal.impl.types.TypeConstructor getTypeConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Internal kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker.EMPTY java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setName(kotlin.reflect.jvm.internal.impl.name.Name) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor getDescriptor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setPreserveSourceElement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType ARGUMENT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind getKind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setAdditionalAnnotations(kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness SAME'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.FqName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.DefaultImpls kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor substitute(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitPackageViewDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setDropOriginalInContainingParts()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities DEFAULT_VISIBILITY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getUnsubstitutedMemberScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType java.util.List&lt;kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt; getArguments()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor&gt; getAllDependencyModules()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind FAKE_OVERRIDE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getStaticScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider java.util.List&lt;java.lang.String&gt; findPackageParts(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.RelationToType getRelation()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Local kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities LOCAL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt boolean isOverridableOrOverrides(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceFile NO_SOURCE_FILE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.name.Name, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType RelationToType(java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.Capability Capability(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setTypeParameters(java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findContinuationClassDescriptorOrNull(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor getThisAsReceiverParameter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType PossiblyInnerType(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters, java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt;, kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SourceElement kotlin.reflect.jvm.internal.impl.descriptors.SourceFile getContainingFile()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setSignatureChange()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getClassDescriptor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.PropertyGetterDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Public kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.ProtectedBound INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor, kotlin.reflect.jvm.internal.impl.name.Name, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setReturnType(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Public kotlin.reflect.jvm.internal.impl.descriptors.Visibility toVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalOrPackage kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility lowerBound$kotlin_core(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisibleWithAnyReceiver(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt; getTypeParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorUtilKt kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor findContinuationClassDescriptorOrNull(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor, kotlin.reflect.jvm.internal.impl.incremental.components.LookupLocation) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected.WhenMappings $EnumSwitchMapping$2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtectedBound kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.PackagePrivate INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities java.lang.Integer compare(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy$default(kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation, kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType, int, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor&gt; getOverriddenDescriptors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider java.util.List&lt;java.lang.String&gt; findMetadataPackageParts(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor R accept(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor&lt;R,D&gt;, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility kotlin.reflect.jvm.internal.impl.descriptors.Visibility getVisibility()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Set&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor&gt; newCopyBuilder()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected.WhenMappings $EnumSwitchMapping$1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt; getPackageFragments(kotlin.reflect.jvm.internal.impl.name.FqName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModalityKt boolean isFinalOrEnum(kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setKind(kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Local INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProvider.Empty java.util.Collection getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterUtilsKt kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType buildPossiblyInnerType(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType PossiblyInnerType(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptorWithTypeParameters, java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt;, kotlin.reflect.jvm.internal.impl.descriptors.PossiblyInnerType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor boolean shouldSeeInternalsOf(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities java.lang.Integer compare(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setName(kotlin.reflect.jvm.internal.impl.name.Name)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableDescriptor java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor&gt; getTypeParameters()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected.WhenMappings $EnumSwitchMapping$0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities UNKNOWN'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy$default(kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation, kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.types.SimpleType getDefaultType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.name.FqName&gt; getSubPackagesOf(kotlin.reflect.jvm.internal.impl.name.FqName, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.name.Name,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider.Empty java.util.List&lt;java.lang.String&gt; findMetadataPackageParts(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PackageViewDescriptor getPackage(kotlin.reflect.jvm.internal.impl.name.FqName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.InternalProtected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ValueDescriptor kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessorsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.descriptors.VariableAccessorDescriptor&gt; getAccessors(kotlin.reflect.jvm.internal.impl.descriptors.VariableDescriptorWithAccessors)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setOwner(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitScriptDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ScriptDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor T getCapability(kotlin.reflect.jvm.internal.impl.descriptors.ModuleDescriptor.Capability&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Protected kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorNonRoot kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor getContainingDeclaration()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithSource getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation copy$default(kotlin.reflect.jvm.internal.impl.descriptors.DescriptorWithRelation, kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.RelationToType, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitScriptDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ScriptDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility$default(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibility boolean isVisible(kotlin.reflect.jvm.internal.impl.resolve.scopes.receivers.ReceiverValue, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.SimpleFunctionDescriptor getOriginal()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType java.lang.String getDescription()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Local kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility.Permissiveness relation(kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Modality OPEN'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor substitute(kotlin.reflect.jvm.internal.impl.types.TypeSubstitutor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.SupertypeLoopChecker java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; findLoopsInSupertypesAndDisconnect(kotlin.reflect.jvm.internal.impl.types.TypeConstructor, java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.TypeConstructor,? extends java.lang.Iterable&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,kotlin.Unit&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setDispatchReceiverParameter(kotlin.reflect.jvm.internal.impl.descriptors.ReceiverParameterDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentProviderImpl PackageFragmentProviderImpl(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.descriptors.PackageFragmentDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ClassConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PackagePartProvider java.util.List&lt;java.lang.String&gt; findPackageParts(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.Visibilities boolean isVisibleWithAnyReceiver(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor.CopyBuilder&lt;D&gt; setModality(kotlin.reflect.jvm.internal.impl.descriptors.Modality)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibilityKt kotlin.reflect.jvm.internal.impl.descriptors.EffectiveVisibility effectiveVisibility(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorWithVisibility, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitTypeAliasDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.TypeAliasDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitValueParameterDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ValueParameterDescriptor, D) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.PropertyAccessorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.PropertyDescriptor getCorrespondingProperty()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstUtil INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ClassDescriptor kotlin.reflect.jvm.internal.impl.resolve.scopes.MemberScope getMemberScope(kotlin.reflect.jvm.internal.impl.types.TypeSubstitution)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.RelationToType kotlin.reflect.jvm.internal.impl.descriptors.RelationToType containerRelation()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptorVisitor R visitConstructorDescriptor(kotlin.reflect.jvm.internal.impl.descriptors.ConstructorDescriptor, D) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor kotlin.reflect.jvm.internal.impl.descriptors.FunctionDescriptor copy(kotlin.reflect.jvm.internal.impl.descriptors.DeclarationDescriptor, kotlin.reflect.jvm.internal.impl.descriptors.Modality, kotlin.reflect.jvm.internal.impl.descriptors.Visibility, kotlin.reflect.jvm.internal.impl.descriptors.CallableMemberDescriptor.Kind, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
</root>
