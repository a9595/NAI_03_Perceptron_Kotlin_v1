<root>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection createProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.Variance, kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isNullableAny(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType makeNotNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isIterator(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isInterface(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean containsTypeAliases(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection asTypeProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean containsError(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isDefaultBound(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean requiresTypeAliasExpansion(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isConstructedFromClassWithGivenFqName(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.name.FqName) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isNullabilityMismatch(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.KotlinType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; boundClosure(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isNothing(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; closure(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType getImmediateSuperclassNotAny(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; constituentTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; immediateSupertypes(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType makeNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isTypeAliasParameter(kotlin.reflect.jvm.internal.impl.descriptors.ClassifierDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; constituentTypes(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeNullability FLEXIBLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType replaceAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection substitute(kotlin.reflect.jvm.internal.impl.types.TypeProjection, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isNullabilityMismatch(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; constituentTypes(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType replaceArgumentsWithStarProjections(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean cannotBeReified(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; boundClosure(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; immediateSupertypes(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; closure(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isBooleanOrNullableBoolean(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isTypeParameter(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; closure(java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends java.util.Collection&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isThrowable(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType replaceAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean equalTypesOrNulls(kotlin.reflect.jvm.internal.impl.types.checker.KotlinTypeChecker, kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType replaceArgumentsWithStarProjections(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; constituentTypes(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType replaceAnnotations(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.descriptors.annotations.Annotations) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeNullability nullability(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; supertypes(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeNullability NULLABLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection substitute(kotlin.reflect.jvm.internal.impl.types.TypeProjection, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean containsTypeAliasParameters(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt; defaultProjections(java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection substitute(kotlin.reflect.jvm.internal.impl.types.TypeProjection, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.KotlinType,? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean containsTypeProjectionsInTopLevelArguments(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection asTypeProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.List&lt;kotlin.reflect.jvm.internal.impl.types.TypeProjection&gt; defaultProjections(java.util.List&lt;? extends kotlin.reflect.jvm.internal.impl.types.KotlinType&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean contains(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.UnwrappedType,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection createProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.Variance, kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt java.util.Collection&lt;kotlin.reflect.jvm.internal.impl.types.KotlinType&gt; supertypes(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.TypeProjection createProjection(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.Variance, kotlin.reflect.jvm.internal.impl.descriptors.TypeParameterDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isNullableNothing(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isBoolean(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isUnit(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeNullability NOT_NULL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isSubtypeOf(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.types.KotlinType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isAnyOrNullableAny(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns(kotlin.reflect.jvm.internal.impl.types.KotlinType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isPrimitiveNumberType(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean isConstructedFromClassWithGivenFqName(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.reflect.jvm.internal.impl.name.FqName) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.KotlinType makeNotNullable(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeNullability nullability(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt boolean contains(kotlin.reflect.jvm.internal.impl.types.KotlinType, kotlin.jvm.functions.Function1&lt;? super kotlin.reflect.jvm.internal.impl.types.UnwrappedType,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.reflect.jvm.internal.impl.types.typeUtil.TypeUtilsKt kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns getBuiltIns(kotlin.reflect.jvm.internal.impl.types.KotlinType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
